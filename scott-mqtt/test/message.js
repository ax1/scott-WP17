const assert = require('assert')
const message = require('../message')
const { crc } = require('../crc')

/**
 * IMPORTANT-PATCH TO PREVENT REORDERING of numeric keys in an object
 * This raises a problem only in the testing phase, since String->JSON->String change the order of the keys. In this case the calcilated crc is different as expected because when converting into an object, the numeric keys can change their order, so the crcs calculated from Indra and calculated form us will be different because the real string is different 
 * This is not a problem in the production phase because we only calculate the order AFTER the JSON is deserialized, so the CRC and the resulting String are OK
 *
 * See the /test/message.js file 
 * In our case, the resource "5570" flips it s order when deserialized
 * See https://stackoverflow.com/questions/280713/elements-order-in-a-for-in-loop for a generic description of the problem
 */
const L1 = '"5750":'
const L2 = '"5110":'
function patch(text, a, b) { return text.replace(a, b) }
/** -----END OF PATCH-------- */


/**-------------------------------------------------------------------------------------
 * 
 * Test a message and CRCs calculated from a source message fronm Indra, with valid CRCs
 *  
 *-------------------------------------------------------------------------------------*/

function testINDRA(originalJSON, expectedSerial, expectedCRC) {
  let source = originalJSON
  source = source.replace(/\s/g, '') //because stringify removes the whitespace
  let text = source

  // patch the string to re-arrange the keys when JSON->Object, then calculate the serial and then reset the patch
  text = patch(text, L1, L2)
  const obj = JSON.parse(text)
  const serial = message.buildSerial(obj)
  text = patch(JSON.stringify(obj), L2, L1)
  const calculatedCRC = crc(serial)

  // JSON must have the same order in keys, after deserialized and serialized again
  assert.deepStrictEqual(text, source, 'input json and output cannot be different')

  // [OPTIONAL since we do not have serial to compare most of the time] The serialized string of values must match
  if (expectedSerial) assert.deepStrictEqual(serial, expectedSerial, 'Indra serialValues and Tecnalia serialValues must have the same value')

  // CRCs must match  
  assert.deepStrictEqual(calculatedCRC, expectedCRC, 'Indra CRC and Tecnalia CRC must have the same value')
}

const INDRA_NODE_JSON = '{"Safety": false, "NodeID": 1, "TimeStamp": 1536230850, "TimeAccuracy": 143567890, "Sensors-Actuators": [{"SensorID": 3341, "TimeStamp": 1536230330, "TimeAccuracy": 143567890, "Resources": {"5527": "0000000000000000000011672"}}, {"SensorID": 3341, "TimeStamp": 1536231220, "TimeAccuracy": 143567890, "Resources": {"5527": "0000000000000000000011672"}}, {"SensorID": 3336, "TimeStamp": 1536230330, "TimeAccuracy": 143567890, "Resources": {"5750": "WAGON/CONTAINER", "5513": "43.138453", "5514": "-2.556184", "5516": "100", "5518": 1536230850}}, {"SensorID": 3341, "TimeStamp": 1536230220, "TimeAccuracy": 143567890, "Resources": {"5527": "Observationsandcomments"}}]}'
const INDRA_NODE_SERIAL = 'false1153623085014356789033411536230330143567890"0000000000000000000011672"33411536231220143567890"0000000000000000000011672"33361536230330143567890"WAGON/CONTAINER""43.138453""-2.556184""100"153623085033411536230220143567890"Observationsandcomments"'
const INDRA_NODE_CRC = 3620125633
testINDRA(INDRA_NODE_JSON, INDRA_NODE_SERIAL, INDRA_NODE_CRC)


const INDRA_SERVICE_JSON = '{"ServiceID": 131100, "Root": {"Gateway": 0, "Source": 0}, "Nodes": [{"Safety": false, "NodeID": 1, "TimeStamp": 1536230850, "TimeAccuracy": 143567890, "Sensors-Actuators": [{"SensorID": 3341, "TimeStamp": 1536230330, "TimeAccuracy": 143567890, "Resources": {"5527": "0000000000000000000011672"}}, {"SensorID": 3341, "TimeStamp": 1536231220, "TimeAccuracy": 143567890, "Resources": {"5527": "0000000000000000000011672"}}, {"SensorID": 3336, "TimeStamp": 1536230330, "TimeAccuracy": 143567890, "Resources": {"5750": "WAGON/CONTAINER", "5513": "43.138453", "5514": "-2.556184", "5516": "100", "5518": 1536230850}}, {"SensorID": 3341, "TimeStamp": 1536230220, "TimeAccuracy": 143567890, "Resources": {"5527": "Observationsandcomments"}}], "CRC": 3620125633}]}'
const INDRA_SERVICE_CRC = 1404001353

testINDRA(INDRA_SERVICE_JSON, null, INDRA_SERVICE_CRC)


/**-------------------------------------------------------------------------------------
 * 
 * Test a message and CRCs calculated from our autogenerated message (the 131100 message)
 *  
 *-------------------------------------------------------------------------------------*/
function testTECNALIA() {
  const service = message.message(9100)
  //this message has the 5570 at the bottom, so no need to apply the patch
  //when the message is generated from tecnalia
  //console.log(service)
}

testTECNALIA()



const IDOIA = '{"ServiceID":132103,"Root":{"Gateway":110,"Source":110,"TimeStamp":0},"Nodes":[{"Safety":false,"NodeID":1,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Sensors-Actuators":[{"SensorID":3341,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"5527":"PMps2JLlqngfMmUoC1yDag=="}},{"SensorID":3341,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"5527":"0000000000000000000001357"}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":1}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":10}},{"SensorID":3341,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"5527":"9111111111111111111111"}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":101}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":2}},{"SensorID":3306,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"5850":true}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":1}},{"SensorID":3300,"TimeStamp":1582798771,"TimeAccuracy":100000000,"Resources":{"9000":0}}],"CRC":333096443}],"CRC":2583080604}'
testINDRA(IDOIA, null, 2583080604)